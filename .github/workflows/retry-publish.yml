name: Retry Publish

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Git tag to republish (e.g., v1.0.0). If empty, uses latest tag.'
        type: string
        required: false
      npm_only:
        description: 'Only republish to npm (skip GitHub Release)'
        type: boolean
        default: false
      github_only:
        description: 'Only republish GitHub Release (skip npm)'
        type: boolean
        default: false

jobs:
  retry-publish:
    runs-on: ubuntu-latest
    name: Retry Publish
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: https://registry.npmjs.org/

      - run: pnpm install --frozen-lockfile

      # Pre-flight checks
      - name: Run pre-flight checks
        run: pnpm tsx scripts/retry-publish.ts

      # Get target tag (user input or latest)
      - name: Determine target tag
        id: tag
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            TAG="${{ github.event.inputs.tag_name }}"
          else
            TAG=$(git describe --tags --abbrev=0)
          fi
          echo "target_tag=$TAG" >> $GITHUB_OUTPUT
          echo "ℹ️  Target tag: $TAG"

      # Verify tag exists
      - name: Verify tag exists
        run: |
          if ! git rev-parse "${{ steps.tag.outputs.target_tag }}" >/dev/null 2>&1; then
            echo "❌ Tag ${{ steps.tag.outputs.target_tag }} does not exist"
            exit 1
          fi
          echo "✅ Tag ${{ steps.tag.outputs.target_tag }} verified"

      # Checkout the exact tag commit and create branch to avoid detached HEAD
      - name: Checkout tag and create branch
        run: |
          echo "🔄 Checking out tag ${{ steps.tag.outputs.target_tag }}"
          git checkout "${{ steps.tag.outputs.target_tag }}"
          
          # Create temporary branch to avoid "ref HEAD is not a symbolic ref" error
          TEMP_BRANCH="retry-publish-${{ github.run_id }}"
          git checkout -b "$TEMP_BRANCH"
          echo "✅ Created temporary branch $TEMP_BRANCH from tag ${{ steps.tag.outputs.target_tag }}"

      # Download pre-built artifact for this commit
      - name: Download dist artifact  
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ci.yml
          commit: ${{ steps.tag.outputs.target_tag }}
          name: dist-${{ steps.tag.outputs.target_tag }}
          path: ./dist
          workflow_conclusion: success
          if_no_artifact_found: warn

      # Fallback: build if no artifact found
      - name: Build if no artifact
        run: |
          if [ ! -f "./dist/index.js" ]; then
            echo "⚠️  No pre-built artifact found, building from source..."
            pnpm run build
          else
            echo "✅ Using pre-built artifact"
          fi

      # Configure Git
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # Manual retry publish (bypassing release-it issues)
      - name: Retry publish
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "📋 Publishing version: $VERSION"
          
          # Publish to npm if not disabled
          if [ "${{ github.event.inputs.github_only }}" != "true" ]; then
            echo "📦 Publishing to npm..."
            npm publish --provenance --access public
            echo "✅ Successfully published to npm"
          fi
          
          # Create/update GitHub Release if not disabled
          if [ "${{ github.event.inputs.npm_only }}" != "true" ]; then
            echo "🐙 Creating GitHub Release..."
            
            # Extract changelog for this version
            CHANGELOG=$(pnpm tsx scripts/extract-changelog.ts $VERSION || echo "Release v$VERSION")
            
            # Create or update release
            gh release create "v$VERSION" \
              --title "v$VERSION" \
              --notes "$CHANGELOG" \
              --target "${{ steps.tag.outputs.target_tag }}" \
              || gh release edit "v$VERSION" \
                --notes "$CHANGELOG"
            
            echo "✅ Successfully created/updated GitHub Release"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Clean up temporary branch
      - name: Clean up temporary branch
        if: always()
        run: |
          TEMP_BRANCH="retry-publish-${{ github.run_id }}"
          echo "🔄 Returning to main branch and cleaning up"
          git checkout main 2>/dev/null || git checkout - 2>/dev/null || true
          git branch -D "$TEMP_BRANCH" 2>/dev/null || true
          echo "✅ Cleaned up temporary branch $TEMP_BRANCH"